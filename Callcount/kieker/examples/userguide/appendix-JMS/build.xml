<project name="Bookstore-Application" basedir="." default="">

	<property file="build.properties" />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>

	<condition property="not-all-files-available-common">
		<resourcecount property="num.requiredLibsFound" when="ne" count="1">
			<fileset dir="${lib.dir}">
				<include name="${jar.file.kieker}" />
			</fileset>
		</resourcecount>
	</condition>

	<target name="-check-files" if="not-all-files-available-common">
		<fail message="${msg.filesNotFound.common}" />
	</target>

	<target name="run-monitoring-activemq" depends="-check-files, -build-jar-monitoring">
		<java fork="true" classname="${main-class-monitoring}">
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.monitoring}" />
                                <path location="." />
			</classpath>
                   	<jvmarg value="-Dkieker.monitoring.configuration=${monitoring.configuration.activemq}" />
                        <jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>
		
	<target name="run-monitoring-hornetq" depends="-check-files, -build-jar-monitoring">
		<java fork="true" classname="${main-class-monitoring}">
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.monitoring}" />
                                <path location="." />
			</classpath>
                   	<jvmarg value="-Dkieker.monitoring.configuration=${monitoring.configuration.hornetq}" />
                        <jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>

	<target name="run-monitoring-openjms" depends="-check-files, -build-jar-monitoring">
		<java fork="true" classname="${main-class-monitoring}">
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.monitoring}" />
                                <path location="." />
			</classpath>
                   	<jvmarg value="-Dkieker.monitoring.configuration=${monitoring.configuration.openjms}" />
                        <jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>

	<condition property="not-all-files-available-activemq">
		<resourcecount property="num.requiredLibsFound" when="ne" count="3">
			<fileset dir="${lib.dir}">
				<include name="${jar.file.activemq}" />
				<include name="${jar.file.sl4j-log4j}" />
				<include name="${jar.file.log4j}" />
			</fileset>
		</resourcecount>
	</condition>

	<target name="-check-files-activemq" if="not-all-files-available-activemq">
		<fail message="${msg.filesNotFound.activemq}" />
	</target>
	
	<target name="run-analysis-activemq" depends="-check-files, -check-files-activemq, -build-jar-analysis">
		<java fork="true" classname="${main-class-analysis}">
			<arg line="${connection-factory.activemq} ${provider-url.activemq} ${queue.activemq}" />
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.analysis}" />
				<path location="." />
			</classpath>
			<jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>

	<condition property="not-all-files-available-openjms">
		<resourcecount property="num.requiredLibsFound" when="ne" count="6">
			<fileset dir="${lib.dir}">
				<include name="${jar.file.jms}" />
				<include name="${jar.file.jndikit}" />
				<include name="${jar.file.concurrent}" />
				<include name="${jar.files.openjms}" /> <!-- actually 3 files -->
			</fileset>
		</resourcecount>
	</condition>
	
	<target name="-check-files-openjms" if="not-all-files-available-openjms">
		<fail message="${msg.filesNotFound.openjms}" />
	</target>
	
	<target name="run-analysis-openjms" depends="-check-files, -check-files-openjms, -build-jar-analysis">
		<java fork="true" classname="${main-class-analysis}">
			<arg line="${connection-factory.openjms} ${provider-url.openjms} ${queue.openjms}" />
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.analysis}" />
				<path location="." />
			</classpath>
			<jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>
	
	<condition property="not-all-files-available-hornetq">
		<resourcecount property="num.requiredLibsFound" when="ne" count="5">
			<fileset dir="${lib.dir}">
				<include name="${jar.file.hornetq.jms-client}" />
				<include name="${jar.file.hornetq.jms-api}" />
				<include name="${jar.file.hornetq.core-client}" />
				<include name="${jar.file.hornetq.netty}" />
				<include name="${jar.file.hornetq.jnp-client}" />
			</fileset>
		</resourcecount>
	</condition>
	
	<target name="-check-files-hornetq" if="not-all-files-available-hornetq">
		<fail message="${msg.filesNotFound.hornetq}" />
	</target>
	
	<target name="run-analysis-hornetq" depends="-check-files, -check-files-hornetq, -build-jar-analysis">
		<java fork="true" classname="${main-class-analysis}">
			<arg line="${connection-factory.hornetq} ${provider-url.hornetq} ${queue.hornetq}" />
			<classpath>
				<path refid="classpath" />
				<path location="${jar.file.analysis}" />
				<path location="." />
			</classpath>
			<jvmarg value="-Dlog4j.configuration=META-INF/log4j.properties"/> <!-- included in the jar -->
		</java>
	</target>
	
	<target name="-build-jar-monitoring" depends="clean.monitoring, -compile">
		<jar destfile="${jar.file.monitoring}" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class-monitoring}" />
			</manifest>
		</jar>
		<delete dir="${build.dir}" />
	</target>
	
	<target name="-build-jar-analysis" depends="clean.analysis, -compile">
		<jar destfile="${jar.file.analysis}" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class-analysis}" />
			</manifest>
		</jar>
		<delete dir="${build.dir}" />
	</target>

	<target name="-compile" depends="-init">
		<javac source="1.5" target="1.5" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" includeAntRuntime="false" />
		<mkdir dir="${build.dir}/${meta.dir}" />
                <copy file="${log4j.properties.example}" tofile="${build.dir}/${meta.dir}/log4j.properties"/>
	</target>

	<target name="-init">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
	</target>
	
	<target name="clean.monitoring">
		<delete file="${jar.file.monitoring}" />
	</target>

	<target name="clean.analysis">
		<delete file="${jar.file.analysis}" />
	</target>
	
	<target name="clean" depends="clean.monitoring, clean.analysis">
	</target>
	
</project>
